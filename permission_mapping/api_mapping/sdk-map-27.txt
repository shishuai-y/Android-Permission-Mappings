android.accessibilityservice.AccessibilityService.getFingerprintGestureController()FingerprintGestureController  ::  android.permission.USE_FINGERPRINT
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.os.Handler)AccountManagerFuture<Bundle>  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.accounts.AccountManager.getAccountsByType(java.lang.String)Account[]  ::  android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByTypeAndFeatures(java.lang.String,[java.lang.String,android.os.Handler)AccountManagerFuture<Account[]>  ::  android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAuthenticatorTypesAsUser(int)AuthenticatorDescription[]  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.accounts.AccountManager.hasFeatures(Account,[java.lang.String,android.os.Handler)AccountManagerFuture<Boolean>  ::  android.permission.GET_ACCOUNTS
android.app.Activity.startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
android.app.Activity.startActivityForResultAsUser(android.content.Intent,int,android.os.Bundle,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
android.app.Activity.startActivityForResultAsUser(android.content.Intent,int,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
android.app.Activity.startActivityForResultAsUser(android.content.Intent,java.lang.String,int,android.os.Bundle,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
android.app.Activity.stopLockTask()void  ::  android.permission.BROADCAST_STICKY
android.app.ActivityManager.addOnUidImportanceListener(OnUidImportanceListener,int)void  ::  android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)boolean  ::  android.permission.CLEAR_APP_USER_DATA, android.permission.ACCESS_INSTANT_APPS
android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor,java.lang.String)void  ::  android.permission.DUMP
android.app.ActivityManager.forceStopPackage(java.lang.String)void  ::  android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.forceStopPackageAsUser(java.lang.String,int)void  ::  android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.getPackageImportance(java.lang.String)int  ::  android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getProcessesInErrorState()List<ProcessErrorStateInfo>  ::  android.permission.DUMP
android.app.ActivityManager.getRecentTasksForUser(int,int,int)List<RecentTaskInfo>  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.getUidImportance(int)int  ::  android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)int  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void  ::  android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,java.lang.String)void  ::  android.permission.KILL_UID
android.app.ActivityManager.moveTaskToFront(int,int)void  ::  android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void  ::  android.permission.REORDER_TASKS
android.app.ActivityManager.removeOnUidImportanceListener(OnUidImportanceListener)void  ::  android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.setPersistentVrThread(int)void  ::  android.permission.RESTRICTED_VR_ACCESS
android.app.ActivityOptions.setLaunchTaskId(int)void  ::  android.permission.START_TASKS_FROM_RECENTS
android.app.AlarmManager.set(int,long,long,long,OnAlarmListener,android.os.Handler,android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,PendingIntent,android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.setAlarmClock(AlarmClockInfo,PendingIntent)void  ::  android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setExact(int,long,PendingIntent)void  ::  android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setExact(int,long,java.lang.String,OnAlarmListener,android.os.Handler)void  ::  android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setExactAndAllowWhileIdle(int,long,PendingIntent)void  ::  android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setTime(long)void  ::  android.permission.SET_TIME
android.app.AlarmManager.setTimeZone(java.lang.String)void  ::  android.permission.SET_TIME_ZONE
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,[int)List<AppOpsManager.PackageOps>  ::  android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getPackagesForOps([int)List<AppOpsManager.PackageOps>  ::  android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.isOperationActive(int,int,java.lang.String)boolean  ::  android.permission.WATCH_APPOPS
android.app.AppOpsManager.resetAllModes()void  ::  android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(int,int,java.lang.String,int)void  ::  android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setRestriction(int,int,int,[java.lang.String)void  ::  android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(int,int,int)void  ::  android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void  ::  android.permission.UPDATE_APP_OPS_STATS
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,OnOpChangedListener)void  ::  android.permission.WATCH_APPOPS
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void  ::  android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.DownloadManager.setDestinationInExternalPublicDir(java.lang.String,java.lang.String)Request  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.app.DownloadManager.setDestinationUri(android.net.Uri)Request  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.app.KeyguardManager.disableKeyguard()void  ::  android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.exitKeyguardSecurely(OnKeyguardExitResult)void  ::  android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.reenableKeyguard()void  ::  android.permission.DISABLE_KEYGUARD
android.app.Notification.setFullScreenIntent(PendingIntent,boolean)Builder  ::  android.permission.USE_FULL_SCREEN_INTENT
android.app.Service.startForeground(int,Notification)void  ::  android.permission.FOREGROUND_SERVICE
android.app.Service.stopSelf()void  ::  android.permission.BROADCAST_STICKY
android.app.Service.stopSelf(int)void  ::  android.permission.BROADCAST_STICKY
android.app.Service.stopSelfResult(int)boolean  ::  android.permission.BROADCAST_STICKY
android.app.VrManager.getPersistentVrModeEnabled()boolean  ::  android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE
android.app.VrManager.getVrModeEnabled()boolean  ::  android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE
android.app.VrManager.registerVrStateCallback(VrStateCallback,android.os.Handler)void  ::  android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE
android.app.VrManager.setAndBindVrCompositor(android.content.ComponentName)void  ::  android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setPersistentVrModeEnabled(boolean)void  ::  android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(Vr2dDisplayProperties)void  ::  android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.unregisterVrStateCallback(VrStateCallback)void  ::  android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE
android.app.WallpaperManager.clear()void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.getDrawable()Drawable  ::  android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getFastDrawable()Drawable  ::  android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)ParcelFileDescriptor  ::  android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()Drawable  ::  android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)int  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)int  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void  ::  android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.setResource(int)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean)int  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean,int)int  ::  android.permission.SET_WALLPAPER
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean  ::  android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName,int)boolean  ::  android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.suggestDesiredDimensions(int,int)void  ::  android.permission.SET_WALLPAPER_HINTS
android.app.admin.DeviceAdminReceiver.getManager(android.content.Context)DevicePolicyManager  ::  android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean  ::  android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.forceRemoveActiveAdmin(android.content.ComponentName,int)void  ::  android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled(android.os.UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()String  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()ComponentName  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()String  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getOwnerInstalledCaCerts(android.os.UserHandle)List<String>  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)List<String>  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()List<String>  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)String  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getUserProvisioningState()int  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getWifiMacAddress(android.content.ComponentName)String  ::  android.permission.ACCESS_WIFI_STATE
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void  ::  android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void  ::  android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.setActiveAdmin(android.content.ComponentName,boolean,int)void  ::  android.permission.MANAGE_DEVICE_ADMINS, android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)void  ::  android.permission.BIND_VPN_SERVICE
android.app.admin.DevicePolicyManager.setDeviceOwner(android.content.ComponentName,java.lang.String,int)boolean  ::  android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void  ::  android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setUserProvisioningState(int,int)void  ::  android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.wipeData(int)void  ::  android.permission.MASTER_CLEAR
android.app.admin.SecurityLog.writeEvent(int,Object...)int  ::  android.permission.WRITE_SECURITY_LOG
android.app.backup.BackupManager.backupNow()void  ::  android.permission.BACKUP
android.app.backup.BackupManager.beginRestoreSession()RestoreSession  ::  android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void  ::  android.permission.BACKUP
android.app.backup.BackupManager.dataChanged()void  ::  android.permission.RECEIVE_BOOT_COMPLETED
android.app.backup.BackupManager.dataChanged(java.lang.String)void  ::  android.permission.RECEIVE_BOOT_COMPLETED
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long  ::  android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()String  ::  android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean  ::  android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean  ::  android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()String[]  ::  android.permission.BACKUP
android.app.backup.BackupManager.requestBackup([java.lang.String,BackupObserver)int  ::  android.permission.BACKUP
android.app.backup.BackupManager.requestBackup([java.lang.String,BackupObserver,BackupManagerMonitor,int)int  ::  android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,SelectBackupTransportCallback)void  ::  android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)String  ::  android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void  ::  android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void  ::  android.permission.BACKUP
android.app.job.JobInfo.setPersisted(boolean)Builder  ::  android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(JobInfo,java.lang.String,int,java.lang.String)int  ::  android.permission.UPDATE_DEVICE_STATS
android.app.timezone.RulesManager.getRulesState()RulesState  ::  android.permission.QUERY_TIME_ZONE_RULES, android.permission.UPDATE_TIME_ZONE_RULES
android.app.trust.TrustManager.clearAllFingerprints()void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean  ::  android.permission.TRUST_LISTENER
android.app.trust.TrustManager.registerTrustListener(TrustListener)void  ::  android.permission.TRUST_LISTENER
android.app.trust.TrustManager.reportEnabledTrustAgentsChanged(int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportKeyguardShowingChanged()void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportUnlockAttempt(boolean,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.reportUnlockLockout(int,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.unlockedByFingerprintForUser(int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.unregisterTrustListener(TrustListener)void  ::  android.permission.TRUST_LISTENER
android.app.usage.UsageStatsManager.isAppInactive(java.lang.String)boolean  ::  android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void  ::  android.permission.BIND_CARRIER_SERVICES
android.app.usage.UsageStatsManager.queryAndAggregateUsageStats(long,long)Map<String,UsageStats>  ::  android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryConfigurations(int,long,long)List<ConfigurationStats>  ::  android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryEvents(long,long)UsageEvents  ::  android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.queryUsageStats(int,long,long)List<UsageStats>  ::  android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void  ::  android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,android.os.UserHandle,android.content.ComponentName,android.os.Bundle)boolean  ::  android.permission.BIND_APPWIDGET
android.bluetooth.BluetoothA2dp.connect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.isA2dpPlaying(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.setAvrcpAbsoluteVolume(int)void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setOptionalCodecsEnabled(BluetoothDevice,int)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.shouldSendVolumeKeys(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.getAudioConfig(BluetoothDevice)BluetoothAudioConfig  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dpSink.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dpSink.isA2dpPlaying(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dpSink.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.changeApplicationBluetoothState(boolean,BluetoothStateChangeCallback)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.disable()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable(boolean)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disableBLE()boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enable()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.enableBLE()boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.factoryReset()boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getAddress()String  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getBondedDevices()Set<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getControllerActivityEnergyInfo(int)BluetoothActivityEnergyInfo  ::  android.permission.BLUETOOTH_PRIVILEGED, android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getDiscoverableTimeout()int  ::  android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.getDiscoveryEndMillis()long  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getLeState()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getName()String  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getScanMode()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getUuids()ParcelUuid[]  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.isDiscovering()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.isEnabled()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.isHardwareTrackingFiltersAvailable()boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.isMultipleAdvertisementSupported()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.isOffloadedFilteringSupported()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.isOffloadedScanBatchingSupported()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)BluetoothServerSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capOn(int)BluetoothServerSocket  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommOn(int)BluetoothServerSocket  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)BluetoothServerSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingL2capOn(int)BluetoothServerSocket  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingL2capOn(int,boolean,boolean)BluetoothServerSocket  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int)BluetoothServerSocket  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int,boolean,boolean)BluetoothServerSocket  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)BluetoothServerSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.readOutOfBandData()Pair<byte[],byte[]>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.requestControllerActivityEnergyInfo(android.os.ResultReceiver)void  ::  android.permission.BLUETOOTH_PRIVILEGED, android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(int)void  ::  android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setScanMode(int)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setScanMode(int,int)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.bluetooth.BluetoothAdapter.startDiscovery()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(LeScanCallback)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan([UUID,LeScanCallback)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(LeScanCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAvrcpController.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getPlayerSettings(BluetoothDevice)BluetoothAvrcpPlayerSettings  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.setPlayerApplicationSetting(BluetoothAvrcpPlayerSettings)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback)BluetoothGatt  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback,int)BluetoothGatt  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback,int,boolean,int,android.os.Handler)BluetoothGatt  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback,int,int)BluetoothGatt  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,BluetoothGattCallback,int,int,android.os.Handler)BluetoothGatt  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBond()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.createBond(int)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.createBondOutOfBand(int,OobData)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.createInsecureL2capSocket(int)BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocket(int)BluetoothSocket  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createL2capSocket(int)BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createRfcommSocket(int)BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)BluetoothSocket  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createScoSocket()BluetoothSocket  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getAlias()String  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBatteryLevel()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()BluetoothClass  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBondState()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getMessageAccessPermission()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getName()String  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getPhonebookAccessPermission()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getSimAccessPermission()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()ParcelUuid[]  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isBondingInitiatedLocally()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isConnected()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isEncrypted()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.removeBond()boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.sdpSearch(android.os.ParcelUuid)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setAlias(java.lang.String)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setDeviceOutOfBandData([byte,[byte)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.setMessageAccessPermission(int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.setPin([byte)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.setSimAccessPermission(int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothGatt.abortReliableWrite()void  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.abortReliableWrite(BluetoothDevice)void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.beginReliableWrite()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.close()void  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.connect()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.disconnect()void  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.discoverServiceByUuid(java.util.UUID)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.discoverServices()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.executeReliableWrite()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.getService(java.util.UUID)BluetoothGattService  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.getServices()List<BluetoothGattService>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readCharacteristic(BluetoothGattCharacteristic)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readDescriptor(BluetoothGattDescriptor)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readPhy()void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readRemoteRssi()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readUsingCharacteristicUuid(java.util.UUID,int,int)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.refresh()boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.registerApp(BluetoothGattCallback,android.os.Handler)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.requestConnectionPriority(int)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.requestMtu(int)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.setCharacteristicNotification(BluetoothGattCharacteristic,boolean)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.setPreferredPhy(int,int,int)void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.unregisterApp()void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.writeCharacteristic(BluetoothGattCharacteristic)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.writeDescriptor(BluetoothGattDescriptor)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattCharacteristic.BluetoothGattCharacteristic(java.util.UUID,int,int)BluetoothGattCharacteristic(UUID  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattCharacteristic.addDescriptor(BluetoothGattDescriptor)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattDescriptor.BluetoothGattDescriptor(java.util.UUID,int)BluetoothGattDescriptor(UUID  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattDescriptor.BluetoothGattDescriptor(java.util.UUID,int,int)BluetoothGattDescriptor(UUID  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattDescriptor.getInstanceId()int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.addService(BluetoothGattService)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.cancelConnection(android.bluetooth.BluetoothDevice)void  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.clearServices()void  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.close()void  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.connect(android.bluetooth.BluetoothDevice,boolean)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.getService(java.util.UUID)BluetoothGattService  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.getServices()List<BluetoothGattService>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,BluetoothGattCharacteristic,boolean)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.removeService(BluetoothGattService)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.sendResponse(android.bluetooth.BluetoothDevice,int,int,int,[byte)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattServer.unregisterCallback()void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattService.BluetoothGattService(java.util.UUID,int)BluetoothGattService(UUID  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattService.addCharacteristic(BluetoothGattCharacteristic)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothGattService.addService(BluetoothGattService)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.clccResponse(int,int,int,int,boolean,java.lang.String,int)void  ::  android.permission.MODIFY_PHONE_STATE, android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.connectAudio()boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.disconnectAudio()boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getAudioRouteAllowed()boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getAudioState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.isAudioConnected(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.isAudioOn()boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(BluetoothDevice,java.lang.String,java.lang.String)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.setAudioRouteAllowed(boolean)void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setForceScoAudio(boolean)void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadsetClient.acceptCall(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.connect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.connectAudio(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.dial(BluetoothDevice,java.lang.String)BluetoothHeadsetClientCall  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.disconnectAudio(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.enterPrivateMode(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.explicitCallTransfer(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getAudioRouteAllowed(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getAudioState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentAgEvents(BluetoothDevice)Bundle  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentAgFeatures(BluetoothDevice)Bundle  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentCalls(BluetoothDevice)List<BluetoothHeadsetClientCall>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getLastVoiceTagNumber(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadsetClient.holdCall(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.rejectCall(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.sendDTMF(BluetoothDevice,byte)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setAudioRouteAllowed(BluetoothDevice,boolean)void  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadsetClient.startVoiceRecognition(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.stopVoiceRecognition(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.terminateCall(BluetoothDevice,BluetoothHeadsetClientCall)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.connectChannelToSink(BluetoothDevice,BluetoothHealthAppConfiguration,int)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.connectChannelToSource(BluetoothDevice,BluetoothHealthAppConfiguration)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.disconnectChannel(BluetoothDevice,BluetoothHealthAppConfiguration,int)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.getMainChannelFd(BluetoothDevice,BluetoothHealthAppConfiguration)ParcelFileDescriptor  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.registerAppConfiguration(java.lang.String,int,int,int,BluetoothHealthCallback)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(java.lang.String,int,BluetoothHealthCallback)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothHealth.unregisterAppConfiguration(BluetoothHealthAppConfiguration)boolean  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothInputDevice.connect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.getIdleTime(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothInputDevice.getProtocolMode(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.getReport(BluetoothDevice,byte,byte,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.sendData(BluetoothDevice,java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.setIdleTime(BluetoothDevice,byte)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.setProtocolMode(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.setReport(BluetoothDevice,byte,java.lang.String)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothInputDevice.virtualUnplug(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothManager.getConnectedDevices(int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectionState(BluetoothDevice,int)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,[int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,BluetoothGattServerCallback)BluetoothGattServer  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,BluetoothGattServerCallback,int)BluetoothGattServer  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.close()void  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getClient()BluetoothDevice  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getState()int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.isConnected(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.connect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.getUnreadMessages(BluetoothDevice)boolean  ::  android.permission.READ_SMS, android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.isConnected(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.sendMessage(BluetoothDevice,[Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)boolean  ::  android.permission.SEND_SMS, android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.connect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothPan.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothPan.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothPbapClient.connect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothProfile.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH
android.bluetooth.BluetoothSap.disconnect(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getClient()BluetoothDevice  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectedDevices()List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectionState(BluetoothDevice)int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getDevicesMatchingConnectionStates([int)List<BluetoothDevice>  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getPriority(BluetoothDevice)int  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.getState()int  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.isConnected(BluetoothDevice)boolean  ::  android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.setPriority(BluetoothDevice,int)boolean  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSocket.connect()void  ::  android.permission.BLUETOOTH
android.bluetooth.le.AdvertisingSet.enableAdvertising(boolean,int,int)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.AdvertisingSet.getOwnAddress()void  ::  android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.le.AdvertisingSet.setAdvertisingData(AdvertiseData)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setAdvertisingParameters(AdvertisingSetParameters)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingData(AdvertiseData)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingEnabled(boolean)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingParameters(PeriodicAdvertisingParameters)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setScanResponseData(AdvertiseData)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings,AdvertiseData,AdvertiseData,AdvertiseCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,AdvertisingSetCallback)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,AdvertisingSetCallback,android.os.Handler)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,int,int,AdvertisingSetCallback)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(AdvertisingSetParameters,AdvertiseData,AdvertiseData,PeriodicAdvertisingParameters,AdvertiseData,int,int,AdvertisingSetCallback,android.os.Handler)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(AdvertiseCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertisingSet(AdvertisingSetCallback)void  ::  android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeScanner.flushPendingScanResults(ScanCallback)void  ::  android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startScan(ScanCallback)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION, android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(ScanSettings,ScanCallback)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION, android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(ScanSettings,android.app.PendingIntent)int  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION, android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(ScanSettings,android.os.WorkSource,ScanCallback)void  ::  android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,ScanCallback)void  ::  android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS
android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(ScanSettings,ScanCallback)void  ::  android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopScan(ScanCallback)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void  ::  android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.PeriodicAdvertisingManager.registerSync(ScanResult,int,int,PeriodicAdvertisingCallback)void  ::  android.permission.BLUETOOTH_SCAN
android.bluetooth.le.PeriodicAdvertisingManager.registerSync(ScanResult,int,int,PeriodicAdvertisingCallback,android.os.Handler)void  ::  android.permission.BLUETOOTH_SCAN
android.bluetooth.le.PeriodicAdvertisingManager.unregisterSync(PeriodicAdvertisingCallback)void  ::  android.permission.BLUETOOTH_SCAN
android.companion.CompanionDeviceManager.associate(AssociationRequest,Callback,android.os.Handler)void  ::  android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND
android.content.ContentProviderClient.setDetectNotResponding(long)void  ::  android.permission.REMOVE_TASKS
android.content.ContentResolver.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)void  ::  android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.cancelSync(SyncRequest)void  ::  android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.getCache(android.net.Uri)Bundle  ::  android.permission.CACHE_CONTENT
android.content.ContentResolver.getCurrentSync()SyncInfo  ::  android.permission.READ_SYNC_STATS
android.content.ContentResolver.getCurrentSyncs()List<SyncInfo>  ::  android.permission.READ_SYNC_STATS
android.content.ContentResolver.getIsSyncable(android.accounts.Account,java.lang.String)int  ::  android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.getMasterSyncAutomatically()boolean  ::  android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.getPeriodicSyncs(android.accounts.Account,java.lang.String)List<PeriodicSync>  ::  android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.getSyncAutomatically(android.accounts.Account,java.lang.String)boolean  ::  android.permission.READ_SYNC_SETTINGS
android.content.ContentResolver.isSyncActive(android.accounts.Account,java.lang.String)boolean  ::  android.permission.READ_SYNC_STATS
android.content.ContentResolver.isSyncPending(android.accounts.Account,java.lang.String)boolean  ::  android.permission.READ_SYNC_STATS
android.content.ContentResolver.putCache(android.net.Uri,android.os.Bundle)void  ::  android.permission.CACHE_CONTENT
android.content.ContentResolver.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)void  ::  android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.setIsSyncable(android.accounts.Account,java.lang.String,int)void  ::  android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.setMasterSyncAutomatically(boolean)void  ::  android.permission.WRITE_SYNC_SETTINGS
android.content.ContentResolver.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)void  ::  android.permission.WRITE_SYNC_SETTINGS
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(Intent,ServiceConnection,int,android.os.UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.clearWallpaper()void  ::  android.permission.SET_WALLPAPER
android.content.Context.getExternalCacheDir()File  ::  android.permission.WRITE_EXTERNAL_STORAGE, android.permission.READ_EXTERNAL_STORAGE
android.content.Context.getExternalCacheDirs()File[]  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalFilesDir(java.lang.String)File  ::  android.permission.WRITE_EXTERNAL_STORAGE, android.permission.READ_EXTERNAL_STORAGE
android.content.Context.getExternalFilesDirs(java.lang.String)File[]  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getExternalMediaDirs()File[]  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.getObbDir()File  ::  android.permission.WRITE_EXTERNAL_STORAGE, android.permission.READ_EXTERNAL_STORAGE
android.content.Context.getObbDirs()File[]  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.content.Context.registerReceiverAsUser(BroadcastReceiver,android.os.UserHandle,IntentFilter,java.lang.String,android.os.Handler)Intent  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.removeStickyBroadcast(Intent)void  ::  android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcastAsUser(Intent,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY
android.content.Context.sendBroadcastAsUser(Intent,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,int)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,int,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(Intent)void  ::  android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(Intent,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(Intent,android.os.UserHandle,android.os.Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void  ::  android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcastAsUser(Intent,android.os.UserHandle,BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void  ::  android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY
android.content.Context.setWallpaper(android.graphics.Bitmap)void  ::  android.permission.SET_WALLPAPER
android.content.Context.setWallpaper(java.io.InputStream)void  ::  android.permission.SET_WALLPAPER
android.content.Context.startActivitiesAsUser([Intent,android.os.Bundle,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivityAsUser(Intent,android.os.Bundle,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivityAsUser(Intent,android.os.UserHandle)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(Intent,android.os.UserHandle)ComponentName  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(Intent,android.os.UserHandle)ComponentName  ::  android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(Intent,android.os.UserHandle)boolean  ::  android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageInstaller.commitTransferred(android.content.IntentSender)void  ::  android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.setAllocateAggressive(boolean)void  ::  android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageInstaller.setGrantedRuntimePermissions([java.lang.String)void  ::  android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void  ::  android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.uninstall(VersionedPackage,android.content.IntentSender)void  ::  android.permission.REQUEST_DELETE_PACKAGES, android.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.uninstall(VersionedPackage,int,android.content.IntentSender)void  ::  android.permission.REQUEST_DELETE_PACKAGES, android.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.uninstall(java.lang.String,android.content.IntentSender)void  ::  android.permission.REQUEST_DELETE_PACKAGES, android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.addOnPermissionsChangeListener(OnPermissionsChangedListener)void  ::  android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.canRequestPackageInstalls()boolean  ::  android.permission.REQUEST_INSTALL_PACKAGES
android.content.pm.PackageManager.deleteApplicationCacheFiles(java.lang.String,IPackageDataObserver)void  ::  android.permission.DELETE_CACHE_FILES
android.content.pm.PackageManager.deleteApplicationCacheFilesAsUser(java.lang.String,int,IPackageDataObserver)void  ::  android.permission.DELETE_CACHE_FILES, android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.deletePackage(java.lang.String,IPackageDeleteObserver,int)void  ::  android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,IPackageDeleteObserver,int,int)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)String  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)List<PackageInfo>  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)Drawable  ::  android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantApps()List<InstantAppInfo>  ::  android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(java.lang.String,int)int  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)PackageInfo  ::  android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getPackageSizeInfo(java.lang.String,IPackageStatsObserver)void  ::  android.permission.GET_PACKAGE_SIZE
android.content.pm.PackageManager.getPackageSizeInfoAsUser(java.lang.String,int,IPackageStatsObserver)void  ::  android.permission.GET_PACKAGE_SIZE
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int  ::  android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)List<ResolveInfo>  ::  android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(OnPermissionsChangedListener)void  ::  android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void  ::  android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.setApplicationEnabledSetting(java.lang.String,int,int)void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)void  ::  android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean  ::  android.permission.SET_PREFERRED_APPLICATIONS, android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void  ::  android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean  ::  android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void  ::  android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.verifyIntentFilter(int,int)void  ::  android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.hardware.ConsumerIrManager.transmit(int,[int)void  ::  android.permission.TRANSMIT_IR
android.hardware.Sensor.getHighestDirectReportRateLevel()int  ::  android.permission.HIGH_SAMPLING_RATE_SENSORS
android.hardware.Sensor.getMinDelay()int  ::  android.permission.HIGH_SAMPLING_RATE_SENSORS
android.hardware.camera2.CameraManager.openCamera(java.lang.String,CameraDevice.StateCallback,android.os.Handler)void  ::  android.permission.CAMERA
android.hardware.display.DisplayManager.connectWifiDisplay(java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.forgetWifiDisplay(java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.renameWifiDisplay(java.lang.String,java.lang.String)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.startWifiDisplayScan()void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.display.DisplayManager.stopWifiDisplayScan()void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,android.os.CancellationSignal,int,AuthenticationCallback,android.os.Handler)void  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(CryptoObject,android.os.CancellationSignal,int,AuthenticationCallback,android.os.Handler,int)void  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enroll([,android.os.CancellationSignal,int,int,EnrollmentCallback)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enumerate(int,EnumerateCallback)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()List<Fingerprint>  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)List<Fingerprint>  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean  ::  android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean  ::  android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(Fingerprint,int,RemovalCallback)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void  ::  android.permission.MANAGE_FINGERPRINT
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(HotplugEventListener)void  ::  android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(HotplugEventListener)void  ::  android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void  ::  android.permission.HDMI_CEC
android.hardware.input.InputManager.addKeyboardLayoutForInputDevice(InputDeviceIdentifier,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
android.hardware.input.InputManager.createInputForwarder(int)IInputForwarder  ::  android.permission.INJECT_EVENTS
android.hardware.input.InputManager.disableInputDevice(int)void  ::  android.permission.DISABLE_INPUT_DEVICE
android.hardware.input.InputManager.enableInputDevice(int)void  ::  android.permission.DISABLE_INPUT_DEVICE
android.hardware.input.InputManager.injectInputEvent(android.view.InputEvent,int)boolean  ::  android.permission.INJECT_EVENTS
android.hardware.input.InputManager.removeKeyboardLayoutForInputDevice(InputDeviceIdentifier,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
android.hardware.input.InputManager.setCurrentKeyboardLayoutForInputDevice(InputDeviceIdentifier,java.lang.String)void  ::  android.permission.SET_KEYBOARD_LAYOUT
android.hardware.input.InputManager.setPointerSpeed(android.content.Context,int)void  ::  android.permission.WRITE_SETTINGS
android.hardware.input.InputManager.setTouchCalibration(java.lang.String,int,TouchCalibration)void  ::  android.permission.SET_INPUT_CALIBRATION
android.hardware.input.InputManager.tryPointerSpeed(int)void  ::  android.permission.SET_POINTER_SPEED
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,NanoAppFilter)int[]  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubHandles()int[]  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubInfo(int)ContextHubInfo  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)NanoAppInstanceInfo  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.loadNanoApp(int,NanoApp)int  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.sendMessage(int,int,ContextHubMessage)int  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.unloadNanoApp(int)int  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.addGeofence(int,int,,GeofenceHardwareCallback)boolean  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.getMonitoringTypes()int[]  ::  android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.pauseGeofence(int,int)boolean  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.registerForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.removeGeofence(int,int)boolean  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.resumeGeofence(int,int,int)boolean  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.LOCATION_HARDWARE
android.hardware.location.GeofenceHardware.unregisterForMonitorStateChangeCallback(int,GeofenceHardwareMonitorCallback)boolean  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.LOCATION_HARDWARE
android.hardware.radio.RadioManager.listModules()int  ::  android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,BandConfig,boolean,RadioTuner.Callback,android.os.Handler)RadioTuner  ::  android.permission.ACCESS_BROADCAST_RADIO
android.hardware.usb.UsbManager.grantPermission(UsbDevice,java.lang.String)void  ::  android.permission.MANAGE_USB
android.hardware.usb.UsbManager.hasPermission(UsbDevice)boolean  ::  android.permission.CAMERA
android.hardware.usb.UsbManager.requestPermission(UsbDevice,android.app.PendingIntent)void  ::  android.permission.CAMERA
android.location.LocationManager.addGeofence(LocationRequest,Geofence,android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.addGpsStatusListener(GpsStatus.Listener)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(GpsStatus.NmeaListener)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(OnNmeaMessageListener,android.os.Handler)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.flushGnssBatch()void  ::  android.permission.LOCATION_HARDWARE
android.location.LocationManager.getGnssBatchSize()int  ::  android.permission.LOCATION_HARDWARE
android.location.LocationManager.getGpsStatus(GpsStatus)GpsStatus  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getLastKnownLocation(java.lang.String)Location  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.getLastLocation()Location  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,BatchedLocationCallback,android.os.Handler)boolean  ::  android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback,android.os.Handler)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback,android.os.Handler)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(GnssStatus.Callback,android.os.Handler)boolean  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.removeAllGeofences(android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.removeGeofence(Geofence,android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.removeProximityAlert(android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.removeUpdates(android.app.PendingIntent)void  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(LocationRequest,android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,LocationListener)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestLocationUpdates(long,float,Criteria,android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(Criteria,LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(Criteria,android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(java.lang.String,LocationListener,android.os.Looper)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.location.LocationManager.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)boolean  ::  android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
android.location.LocationManager.unregisterGnssBatchedLocationCallback(BatchedLocationCallback)boolean  ::  android.permission.LOCATION_HARDWARE
android.location.LocationRequest.setHideFromAppOps(boolean)void  ::  android.permission.UPDATE_APP_OPS_STATS
android.location.LocationRequest.setWorkSource(android.os.WorkSource)void  ::  android.permission.UPDATE_DEVICE_STATS
android.media.AsyncPlayer.stop()void  ::  android.permission.WAKE_LOCK
android.media.AudioManager.adjustStreamVolume(int,int,int)void  ::  android.permission.BLUETOOTH
android.media.AudioManager.dispatchAudioFocusChange(AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)int  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.forceVolumeControlStream(int)void  ::  android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.getLastAudibleStreamVolume(int)int  ::  android.permission.QUERY_AUDIO_STATE"
android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy)int  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocus(AudioFocusRequest,android.media.audiopolicy.AudioPolicy)int  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int)int  ::  android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)int  ::  android.permission.MODIFY_AUDIO_ROUTING, android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.setBluetoothScoOn(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setMasterMute(boolean,int)void  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMicrophoneMute(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setMode(int)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setSpeakerphoneOn(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.setStreamVolume(int,int,int)void  ::  android.permission.BLUETOOTH
android.media.AudioManager.setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)void  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.startBluetoothSco()void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.startBluetoothScoVirtualCall()void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.stopBluetoothSco()void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioRecord.AudioRecord(AudioAttributes,AudioFormat,int,int)AudioRecord(AudioAttributes  ::  android.permission.RECORD_AUDIO
android.media.AudioRecord.AudioRecord(int,int,int,int,int)AudioRecord(int  ::  android.permission.RECORD_AUDIO
android.media.AudioRecord.build()AudioRecord  ::  android.permission.RECORD_AUDIO
android.media.AudioRecordingConfiguration.getClientPackageName()String  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioRecordingConfiguration.getClientUid()int  ::  android.permission.MODIFY_AUDIO_ROUTING
android.media.MediaExtractor.setDataSource(android.content.Context,android.net.Uri)void  ::  android.permission.INTERNET
android.media.MediaExtractor.setDataSource(java.lang.String)void  ::  android.permission.INTERNET
android.media.MediaPlayer.pause()void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.release()void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.reset()void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.setWakeMode(android.content.Context,int)void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.start()void  ::  android.permission.WAKE_LOCK
android.media.MediaPlayer.stop()void  ::  android.permission.WAKE_LOCK
android.media.MediaRecorder.isSystemOnlyAudioSource(int)boolean  ::  android.permission.CAPTURE_AUDIO_OUTPUT
android.media.MediaScannerConnection.disconnect()void  ::  android.permission.BROADCAST_STICKY
android.media.Ringtone.play()void  ::  android.permission.WAKE_LOCK
android.media.Ringtone.stop()void  ::  android.permission.WAKE_LOCK
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void  ::  android.permission.WRITE_SECURE_SETTINGS
android.media.RingtoneManager.getCursor()Cursor  ::  android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.getValidRingtoneUri(android.content.Context)Uri  ::  android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.openRingtone(android.content.Context,android.net.Uri)InputStream  ::  android.permission.READ_EXTERNAL_STORAGE
android.media.RingtoneManager.stopPreviousRingtone()void  ::  android.permission.WAKE_LOCK
android.media.browse.MediaBrowser.disconnect()void  ::  android.permission.BROADCAST_STICKY
android.media.projection.MediaProjectionManager.getMediaProjection(int,android.content.Intent)MediaProjection  ::  android.permission.SYSTEM_ALERT_WINDOW
android.media.session.MediaSession.MediaSession(android.content.Context,java.lang.String,int)MediaSession(@NonNull  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(OnActiveSessionsChangedListener,android.content.ComponentName)void  ::  android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)void  ::  android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getActiveSessions(android.content.ComponentName)List<MediaController>  ::  android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getActiveSessionsForUser(android.content.ComponentName,int)List<MediaController>  ::  android.permission.INTERACT_ACROSS_USERS_FULL
android.media.session.MediaSessionManager.setOnMediaKeyListener(OnMediaKeyListener,android.os.Handler)void  ::  android.permission.SET_MEDIA_KEY_LISTENER
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener,android.os.Handler)void  ::  android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,SoundTriggerDetector.Callback,android.os.Handler)SoundTriggerDetector  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)Model  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(java.util.UUID)boolean  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(android.hardware.soundtrigger.SoundTrigger.SoundModel)int  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(java.util.UUID,android.app.PendingIntent,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)int  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(java.util.UUID)int  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(java.util.UUID)int  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(Model)void  ::  android.permission.MANAGE_SOUND_TRIGGER
android.media.tv.TvInputManager.acquireTvInputHardware(int,HardwareCallback,TvInputInfo)Hardware  ::  android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,TvInputInfo,HardwareCallback)Hardware  ::  android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.addBlockedRating(TvContentRating)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,TvStreamConfig)boolean  ::  android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)List<TvStreamConfig>  ::  android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getDvbDeviceList()List<DvbDeviceInfo>  ::  android.permission.DVB_DEVICE
android.media.tv.TvInputManager.getHardwareList()List<TvInputHardwareInfo>  ::  android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.getTvContentRatingSystemList()List<TvContentRatingSystemInfo>  ::  android.permission.READ_CONTENT_RATING_SYSTEMS
android.media.tv.TvInputManager.isSingleSessionActive()boolean  ::  android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void  ::  android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void  ::  android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void  ::  android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.openDvbDevice(DvbDeviceInfo,int)ParcelFileDescriptor  ::  android.permission.DVB_DEVICE
android.media.tv.TvInputManager.releaseTvInputHardware(int,Hardware)void  ::  android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.removeBlockedRating(TvContentRating)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvView.setMain()void  ::  android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(TvContentRating)void  ::  android.permission.MODIFY_PARENTAL_CONTROLS
android.net.ConnectivityManager.factoryReset()void  ::  android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.getActiveLinkProperties()LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetwork()Network  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkForUid(int)Network  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getActiveNetworkInfo()NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkInfoForUid(int)NetworkInfo  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getAllNetworkInfo()NetworkInfo[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworks()Network[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAlwaysOnVpnPackageForUser(int)String  ::  android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getCaptivePortalServerUrl()String  ::  android.permission.LOCAL_MAC_ADDRESS
android.net.ConnectivityManager.getLastTetherError(java.lang.String)int  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(Network)LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(int)LinkProperties  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getMobileProvisioningUrl()String  ::  android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.getMultipathPreference(Network)int  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkCapabilities(Network)NetworkCapabilities  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkForType(int)Network  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(Network)NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(int)NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkPreference()int  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getRestrictBackgroundStatus()int  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableBluetoothRegexs()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableIfaces()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableUsbRegexs()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableWifiRegexs()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredDhcpRanges()String[]  ::  android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.getTetheredIfaces()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheringErroredIfaces()String[]  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isActiveNetworkMetered()boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isNetworkSupported(int)boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isTetheringSupported()boolean  ::  android.permission.TETHER_PRIVILEGED, android.permission.WRITE_SETTINGS
android.net.ConnectivityManager.registerDefaultNetworkCallback(NetworkCallback)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(NetworkCallback,android.os.Handler)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,NetworkCallback)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,NetworkCallback,android.os.Handler)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest,android.app.PendingIntent)void  ::  android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.reportInetCondition(int,int)void  ::  android.permission.STATUS_BAR
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback)void  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,android.os.Handler)void  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,android.os.Handler,int)void  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(NetworkRequest,NetworkCallback,int)void  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(NetworkRequest,android.app.PendingIntent)void  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestRouteToHost(int,int)boolean  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestRouteToHostAddress(int,java.net.InetAddress)boolean  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.setAcceptUnvalidated(Network,boolean,boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setAirplaneMode(boolean)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setAlwaysOnVpnPackageForUser(int,java.lang.String,boolean)boolean  ::  android.permission.BIND_VPN_SERVICE
android.net.ConnectivityManager.setAvoidUnvalidated(Network)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setGlobalProxy(ProxyInfo)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setUsbTethering(boolean)int  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.startCaptivePortalApp(Network)void  ::  android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.startTethering(int,boolean,OnStartTetheringCallback)void  ::  android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.startTethering(int,boolean,OnStartTetheringCallback,android.os.Handler)void  ::  android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.startUsingNetworkFeature(int,java.lang.String)int  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.stopTethering(int)void  ::  android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.stopUsingNetworkFeature(int,java.lang.String)int  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.tether(java.lang.String)int  ::  android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.unregisterNetworkFactory(android.os.Messenger)void  ::  android.permission.NETWORK_FACTORY, android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.ConnectivityManager.untether(java.lang.String)int  ::  android.permission.CHANGE_NETWORK_STATE
android.net.NetworkRequest.setSignalStrength(int)Builder  ::  android.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP
android.net.NetworkScoreManager.clearScores()boolean  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.disableScoring()void  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getActiveScorer()NetworkScorerAppData  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getActiveScorerPackage()String  ::  android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getAllValidScorers()List<NetworkScorerAppData>  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,INetworkScoreCache,int)void  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores([NetworkKey)boolean  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.setActiveScorer(java.lang.String)boolean  ::  android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,INetworkScoreCache)void  ::  android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores([ScoredNetwork)boolean  ::  android.permission.SCORE_NETWORKS
android.net.TrafficStats.clearThreadStatsUid()void  ::  android.permission.UPDATE_DEVICE_STATS
android.net.TrafficStats.setThreadStatsUid(int)void  ::  android.permission.UPDATE_DEVICE_STATS
android.net.VpnService.onRevoke()void  ::  android.permission.BROADCAST_STICKY
android.net.VpnService.prepareAndAuthorize(android.content.Context)void  ::  android.permission.CONTROL_VPN
android.net.sip.SipAudioCall.close()void  ::  android.permission.WAKE_LOCK
android.net.sip.SipAudioCall.endCall()void  ::  android.permission.WAKE_LOCK
android.net.sip.SipAudioCall.setSpeakerMode(boolean)void  ::  android.permission.MODIFY_AUDIO_SETTINGS
android.net.sip.SipAudioCall.startAudio()void  ::  android.permission.WAKE_LOCK, android.permission.RECORD_AUDIO, android.permission.ACCESS_WIFI_STATE
android.net.sip.SipManager.close(java.lang.String)void  ::  android.permission.USE_SIP
android.net.sip.SipManager.isOpened(java.lang.String)boolean  ::  android.permission.USE_SIP
android.net.sip.SipManager.isRegistered(java.lang.String)boolean  ::  android.permission.USE_SIP
android.net.wifi.RttManager.disableResponder(ResponderCallback)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.enableResponder(ResponderCallback)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.getRttCapabilities()RttCapabilities  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.startRanging([RttParams,RttListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.stopRanging(RttListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiManager.connect(WifiConfiguration,ActionListener)void  ::  android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.NETWORK_SETUP_WIZARD
android.net.wifi.WifiManager.connect(int,ActionListener)void  ::  android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.NETWORK_SETUP_WIZARD
android.net.wifi.WifiManager.disable(int,ActionListener)void  ::  android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.NETWORK_SETUP_WIZARD
android.net.wifi.WifiManager.disableEphemeralNetwork(java.lang.String)void  ::  android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK
android.net.wifi.WifiManager.disableNetwork(int)boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.disconnect()boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.enableNetwork(int,boolean)boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.enableVerboseLogging(int)void  ::  android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.factoryReset()void  ::  android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.forget(int,ActionListener)void  ::  android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.NETWORK_SETUP_WIZARD
android.net.wifi.WifiManager.getConfiguredNetworks()List<WifiConfiguration>  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getConnectionStatistics()WifiConnectionStatistics  ::  android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.getCountryCode()String  ::  android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getCurrentNetwork()Network  ::  android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD
android.net.wifi.WifiManager.getPasspointConfigurations()List<PasspointConfiguration>  ::  android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()List<WifiConfiguration>  ::  android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.getScanResults()List<ScanResult>  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.WifiManager.getWifiApConfiguration()WifiConfiguration  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiApState()int  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiState()int  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.is5GHzBandSupported()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isDeviceToApRttSupported()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isEnhancedPowerReportingSupported()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isP2pSupported()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isPreferredNetworkOffloadSupported()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isScanAlwaysAvailable()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isTdlsSupported()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiApEnabled()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiEnabled()boolean  ::  android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.reassociate()boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.reconnect()boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.removeNetwork(int)boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.removePasspointConfiguration(java.lang.String)void  ::  android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreBackupData([byte)void  ::  android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreSupplicantBackupData([byte,[byte)void  ::  android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.retrieveBackupData()byte[]  ::  android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.save(WifiConfiguration,ActionListener)void  ::  android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.NETWORK_SETUP_WIZARD
android.net.wifi.WifiManager.setWifiApConfiguration(WifiConfiguration)boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.setWifiApEnabled(WifiConfiguration,boolean)boolean  ::  android.permission.TETHER_PRIVILEGED
android.net.wifi.WifiManager.setWifiEnabled(boolean)boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.startLocalOnlyHotspot(LocalOnlyHotspotCallback,android.os.Handler)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.startScan()boolean  ::  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.startScan(android.os.WorkSource)boolean  ::  android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManager.startSoftAp(WifiConfiguration)boolean  ::  android.permission.NETWORK_STACK, android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.wifi.WifiManager.stopSoftAp()boolean  ::  android.permission.NETWORK_STACK, android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.wifi.WifiManager.updateInterfaceIpState(java.lang.String,int)void  ::  android.permission.NETWORK_STACK, android.permission.PERMISSION_MAINLINE_NETWORK_STACK
android.net.wifi.WifiManager.watchLocalOnlyHotspot(LocalOnlyHotspotObserver,android.os.Handler)void  ::  android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.WifiScanner.getAvailableChannels(int)List<Integer>  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getScanResults()boolean  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getSingleScanResults()List<ScanResult>  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.registerScanListener(ScanListener)void  ::  android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.startBackgroundScan(ScanSettings,ScanListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(ScanSettings,ScanListener,android.os.WorkSource)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startDisconnectedPnoScan(ScanSettings,PnoSettings,PnoScanListener)void  ::  android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.startScan(ScanSettings,ScanListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(ScanSettings,ScanListener,android.os.WorkSource)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopBackgroundScan(ScanListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopPnoScan(ScanListener)void  ::  android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.stopScan(ScanListener)void  ::  android.permission.LOCATION_HARDWARE
android.net.wifi.aware.IdentityChangedListener.onIdentityChanged([byte)void  ::  android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareManager.attach(AttachCallback,IdentityChangedListener,android.os.Handler)void  ::  android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareSession.publish(PublishConfig,DiscoverySessionCallback,android.os.Handler)void  ::  android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareSession.subscribe(SubscribeConfig,DiscoverySessionCallback,android.os.Handler)void  ::  android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.p2p.WifiP2pManager.addLocalService(Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,ActionListener)void  ::  android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.connect(Channel,WifiP2pConfig,ActionListener)void  ::  android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.createGroup(Channel,ActionListener)void  ::  android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.deletePersistentGroup(Channel,int,ActionListener)void  ::  android.permission.OVERRIDE_WIFI_CONFIG, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.discoverPeers(Channel,ActionListener)void  ::  android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.discoverServices(Channel,ActionListener)void  ::  android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.listen(Channel,boolean,ActionListener)void  ::  android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.requestGroupInfo(Channel,GroupInfoListener)void  ::  android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.requestPeers(Channel,PeerListListener)void  ::  android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.requestPersistentGroupInfo(Channel,PersistentGroupInfoListener)void  ::  android.permission.READ_WIFI_CREDENTIAL, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.setDeviceName(Channel,java.lang.String,ActionListener)void  ::  android.permission.OVERRIDE_WIFI_CONFIG, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.setMiracastMode(int)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.setWFDInfo(Channel,WifiP2pWfdInfo,ActionListener)void  ::  android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.setWifiP2pChannels(Channel,int,int,ActionListener)void  ::  android.permission.OVERRIDE_WIFI_CONFIG, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK
android.nfc.NfcAdapter.addNfcUnlockHandler(NfcUnlockHandler,[java.lang.String)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableForegroundDispatch(android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.disableForegroundNdefPush(android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.disableNdefPush()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.dispatch(Tag)void  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enable()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,[IntentFilter,[java.lang.String[])void  ::  android.permission.NFC
android.nfc.NfcAdapter.enableForegroundNdefPush(android.app.Activity,NdefMessage)void  ::  android.permission.NFC
android.nfc.NfcAdapter.enableNdefPush()boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(NfcUnlockHandler)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.setBeamPushUris([Uri,android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.setBeamPushUrisCallback(CreateBeamUrisCallback,android.app.Activity)void  ::  android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage,android.app.Activity,...)void  ::  android.permission.NFC
android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback,android.app.Activity,...)void  ::  android.permission.NFC
android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback,android.app.Activity,...)void  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.isDefaultServiceForAid(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.NFC
android.nfc.cardemulation.CardEmulation.isDefaultServiceForCategory(android.content.ComponentName,java.lang.String)boolean  ::  android.permission.NFC
android.nfc.tech.IsoDep.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.IsoDep.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.IsoDep.transceive([byte)byte[]  ::  android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int,[byte)boolean  ::  android.permission.NFC
android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int,[byte)boolean  ::  android.permission.NFC
android.nfc.tech.MifareClassic.decrement(int,int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.MifareClassic.increment(int,int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.readBlock(int)byte[]  ::  android.permission.NFC
android.nfc.tech.MifareClassic.restore(int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.transceive([byte)byte[]  ::  android.permission.NFC
android.nfc.tech.MifareClassic.transfer(int)void  ::  android.permission.NFC
android.nfc.tech.MifareClassic.writeBlock(int,[byte)void  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.readPages(int)byte[]  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.transceive([byte)byte[]  ::  android.permission.NFC
android.nfc.tech.MifareUltralight.writePage(int,[byte)void  ::  android.permission.NFC
android.nfc.tech.Ndef.getNdefMessage()NdefMessage  ::  android.permission.NFC
android.nfc.tech.Ndef.isWritable()boolean  ::  android.permission.NFC
android.nfc.tech.Ndef.makeReadOnly()boolean  ::  android.permission.NFC
android.nfc.tech.Ndef.writeNdefMessage(android.nfc.NdefMessage)void  ::  android.permission.NFC
android.nfc.tech.NdefFormatable.format(android.nfc.NdefMessage)void  ::  android.permission.NFC
android.nfc.tech.NdefFormatable.formatReadOnly(android.nfc.NdefMessage)void  ::  android.permission.NFC
android.nfc.tech.NfcA.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.NfcA.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.NfcA.transceive([byte)byte[]  ::  android.permission.NFC
android.nfc.tech.NfcB.transceive([byte)byte[]  ::  android.permission.NFC
android.nfc.tech.NfcF.getTimeout()int  ::  android.permission.NFC
android.nfc.tech.NfcF.setTimeout(int)void  ::  android.permission.NFC
android.nfc.tech.NfcF.transceive([byte)byte[]  ::  android.permission.NFC
android.nfc.tech.NfcV.transceive([byte)byte[]  ::  android.permission.NFC
android.nfc.tech.TagTechnology.close()void  ::  android.permission.NFC
android.nfc.tech.TagTechnology.connect()void  ::  android.permission.NFC
android.nfc.tech.TagTechnology.reconnect()void  ::  android.permission.NFC
android.os.Build.getSerial()String  ::  android.permission.READ_PHONE_STATE
android.os.DropBoxManager.getNextEntry(java.lang.String,long)Entry  ::  android.permission.PACKAGE_USAGE_STATS, android.permission.READ_LOGS
android.os.Environment.getExternalStorageDirectory()File  ::  android.permission.WRITE_EXTERNAL_STORAGE, android.permission.READ_EXTERNAL_STORAGE
android.os.Environment.maybeTranslateEmulatedPathToInternal(java.io.File)File  ::  android.permission.WRITE_MEDIA_STORAGE
android.os.IncidentManager.reportIncident(IncidentReportArgs)void  ::  android.permission.PACKAGE_USAGE_STATS, android.permission.DUMP
android.os.IncidentManager.reportIncident(java.lang.String,[byte)void  ::  android.permission.PACKAGE_USAGE_STATS, android.permission.DUMP
android.os.PowerManager.boostScreenBrightness(long)void  ::  android.permission.DEVICE_POWER
android.os.PowerManager.getLastShutdownReason()int  ::  android.permission.DEVICE_POWER
android.os.PowerManager.goToSleep(long)void  ::  android.permission.DEVICE_POWER, android.permission.USER_ACTIVITY
android.os.PowerManager.goToSleep(long,int,int)void  ::  android.permission.DEVICE_POWER
android.os.PowerManager.nap(long)void  ::  android.permission.DEVICE_POWER
android.os.PowerManager.newWakeLock(int,java.lang.String)WakeLock  ::  android.permission.WAKE_LOCK
android.os.PowerManager.reboot(java.lang.String)void  ::  android.permission.REBOOT
android.os.PowerManager.rebootSafeMode()void  ::  android.permission.REBOOT
android.os.PowerManager.setBacklightBrightness(int)void  ::  android.permission.DEVICE_POWER
android.os.PowerManager.userActivity(long,boolean)void  ::  android.permission.DEVICE_POWER
android.os.PowerManager.userActivity(long,int,int)void  ::  android.permission.DEVICE_POWER, android.permission.USER_ACTIVITY
android.os.PowerManager.wakeUp(long)void  ::  android.permission.DEVICE_POWER
android.os.PowerManager.wakeUp(long,java.lang.String)void  ::  android.permission.DEVICE_POWER
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void  ::  android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)void  ::  android.permission.RECOVERY, android.permission.REBOOT
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void  ::  android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,ProgressListener)void  ::  android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,ProgressListener,Handler)void  ::  android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void  ::  android.permission.RECOVERY, android.permission.REBOOT
android.os.RecoverySystem.rebootWipeUserData(android.content.Context)void  ::  android.permission.REBOOT
android.os.RecoverySystem.rebootWipeUserData(android.content.Context,boolean,java.lang.String,boolean)void  ::  android.permission.REBOOT
android.os.RecoverySystem.rebootWipeUserData(android.content.Context,boolean,java.lang.String,boolean,boolean)void  ::  android.permission.REBOOT
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void  ::  android.permission.RECOVERY
android.os.UserManager.canAddMoreManagedProfiles(int,boolean)boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreUsers()boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.canHaveRestrictedProfile(int)boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void  ::  android.permission.MANAGE_USERS
android.os.UserManager.createGuest(android.content.Context,java.lang.String)UserInfo  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUser(java.lang.String,int,int)UserInfo  ::  android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUserEvenWhenDisallowed(java.lang.String,int,int,[java.lang.String)UserInfo  ::  android.permission.MANAGE_USERS
android.os.UserManager.createRestrictedProfile(java.lang.String)UserInfo  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.createUser(java.lang.String,int)UserInfo  ::  android.permission.MANAGE_USERS
android.os.UserManager.evictCredentialEncryptionKey(int)void  ::  android.permission.MANAGE_USERS
android.os.UserManager.getBadgedLabelForUser(CharSequence,UserHandle)CharSequence  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getCredentialOwnerProfile(int)int  ::  android.permission.MANAGE_USERS
android.os.UserManager.getDefaultGuestRestrictions()Bundle  ::  android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfileIds(int)int[]  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfiles(int)List<UserInfo>  ::  android.permission.MANAGE_USERS
android.os.UserManager.getManagedProfileBadge(int)int  ::  android.permission.MANAGE_USERS
android.os.UserManager.getPrimaryUser()UserInfo  ::  android.permission.MANAGE_USERS
android.os.UserManager.getProfileIds(int,boolean)int[]  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.getProfileIdsWithDisabled(int)int[]  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.getProfileParent(int)UserInfo  ::  android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(int)List<UserInfo>  ::  android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountName()String  ::  android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()PersistableBundle  ::  android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()String  ::  android.permission.MANAGE_USERS
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[]  ::  android.permission.MANAGE_USERS
android.os.UserManager.getUserAccount(int)String  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManager.getUserCount()int  ::  android.permission.MANAGE_USERS
android.os.UserManager.getUserIcon(int)Bitmap  ::  android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.getUserInfo(int)UserInfo  ::  android.permission.MANAGE_USERS
android.os.UserManager.getUserName()String  ::  android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.getUserRestrictionSource(java.lang.String,UserHandle)int  ::  android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,UserHandle)List<EnforcingUser>  ::  android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictions(UserHandle)Bundle  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getUsers()List<UserInfo>  ::  android.permission.MANAGE_USERS
android.os.UserManager.getUsers(boolean)List<UserInfo>  ::  android.permission.MANAGE_USERS
android.os.UserManager.hasBaseUserRestriction(java.lang.String,UserHandle)boolean  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.hasUserRestriction(java.lang.String,UserHandle)boolean  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isAdminUser()boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.isEphemeralUser()boolean  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.isGuestUser()boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.isGuestUser(int)boolean  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile()boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile(int)boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.isPrimaryUser()boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.isSameProfileGroup(int,int)boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.isUserAdmin(int)boolean  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.isUserEphemeral(int)boolean  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.isUserNameSet()boolean  ::  android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED
android.os.UserManager.isUserRunning(int)boolean  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserSwitcherEnabled()boolean  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.isUserUnlocked(UserHandle)boolean  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlocked(int)boolean  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlockingOrUnlocked(UserHandle)boolean  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.isUserUnlockingOrUnlocked(int)boolean  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.markGuestForDeletion(int)boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.removeUser(int)boolean  ::  android.permission.MANAGE_USERS
android.os.UserManager.removeUserEvenWhenDisallowed(int)boolean  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
android.os.UserManager.setDefaultGuestRestrictions(Bundle)void  ::  android.permission.MANAGE_USERS
android.os.UserManager.setSeedAccountData(int,java.lang.String,java.lang.String,PersistableBundle)void  ::  android.permission.MANAGE_USERS
android.os.UserManager.setUserAccount(int,java.lang.String)void  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
android.os.UserManager.setUserEnabled(int)void  ::  android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(int,android.graphics.Bitmap)void  ::  android.permission.MANAGE_USERS
android.os.UserManager.setUserName(int,java.lang.String)void  ::  android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(java.lang.String,boolean)void  ::  android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(java.lang.String,boolean,UserHandle)void  ::  android.permission.MANAGE_USERS
android.os.UserManager.someUserHasSeedAccount(java.lang.String,java.lang.String)boolean  ::  android.permission.MANAGE_USERS
android.os.Vibrator.cancel()void  ::  android.permission.VIBRATE
android.os.Vibrator.vibrate(VibrationEffect)void  ::  android.permission.VIBRATE
android.os.Vibrator.vibrate(VibrationEffect,android.media.AudioAttributes)void  ::  android.permission.VIBRATE
android.os.Vibrator.vibrate([long,int)void  ::  android.permission.VIBRATE
android.os.Vibrator.vibrate([long,int,android.media.AudioAttributes)void  ::  android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,VibrationEffect,android.media.AudioAttributes)void  ::  android.permission.VIBRATE
android.os.Vibrator.vibrate(long)void  ::  android.permission.VIBRATE
android.os.Vibrator.vibrate(long,android.media.AudioAttributes)void  ::  android.permission.VIBRATE
android.os.health.SystemHealthManager.takeUidSnapshot(int)HealthStats  ::  android.permission.BATTERY_STATS
android.os.health.SystemHealthManager.takeUidSnapshots([int)HealthStats[]  ::  android.permission.BATTERY_STATS
android.os.storage.StorageVolume.createAccessIntent(java.lang.String)Intent  ::  android.permission.WRITE_EXTERNAL_STORAGE, android.permission.READ_EXTERNAL_STORAGE
android.os.storage.VolumeInfo.getInternalPathForUser(int)File  ::  android.permission.WRITE_MEDIA_STORAGE
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener,android.os.Handler)void  ::  android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.addPrintServicesChangeListener(PrintServicesChangeListener,android.os.Handler)void  ::  android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServiceRecommendations()List<RecommendationInfo>  ::  android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServices(int)List<PrintServiceInfo>  ::  android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(PrintServiceRecommendationsChangeListener)void  ::  android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServicesChangeListener(PrintServicesChangeListener)void  ::  android.permission.READ_PRINT_SERVICES
android.provider.BlockedNumberContract.notifyEmergencyContact(android.content.Context)void  ::  android.permission.WRITE_BLOCKED_NUMBERS, android.permission.READ_BLOCKED_NUMBERS
android.provider.Settings.canDrawOverlays(android.content.Context)boolean  ::  android.permission.SYSTEM_ALERT_WINDOW
android.provider.Settings.canWrite(android.content.Context)boolean  ::  android.permission.WRITE_SETTINGS
android.provider.Settings.getString(android.content.ContentResolver,java.lang.String)String  ::  android.permission.READ_DEVICE_CONFIG
android.provider.Settings.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings.resetToDefaults(android.content.ContentResolver,java.lang.String)void  ::  android.permission.WRITE_SECURE_SETTINGS
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,[int,[byte)X509Certificate[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.service.carrier.CarrierService.notifyCarrierNetworkChange(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.service.dreams.DreamService.dispatchGenericMotionEvent(android.view.MotionEvent)boolean  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.dispatchKeyEvent(android.view.KeyEvent)boolean  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.dispatchKeyShortcutEvent(android.view.KeyEvent)boolean  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.dispatchTouchEvent(android.view.MotionEvent)boolean  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.dispatchTrackballEvent(android.view.MotionEvent)boolean  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.finish()void  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.onWakeUp()void  ::  android.permission.BROADCAST_STICKY
android.service.dreams.DreamService.wakeUp()void  ::  android.permission.BROADCAST_STICKY
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean  ::  android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean  ::  android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,[byte)void  ::  android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void  ::  android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int  ::  android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int  ::  android.permission.OEM_UNLOCK_STATE, android.permission.READ_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean  ::  android.permission.OEM_UNLOCK_STATE, android.permission.READ_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void  ::  android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void  ::  android.permission.OEM_UNLOCK_STATE
android.service.voice.AlwaysOnHotwordDetector.startRecognition(int)boolean  ::  android.permission.CAPTURE_AUDIO_HOTWORD, android.permission.RECORD_AUDIO
android.service.voice.AlwaysOnHotwordDetector.stopRecognition()boolean  ::  android.permission.CAPTURE_AUDIO_HOTWORD, android.permission.RECORD_AUDIO
android.speech.SpeechRecognizer.destroy()void  ::  android.permission.BROADCAST_STICKY
android.speech.tts.TextToSpeech.isLanguageAvailable(java.util.Locale)int  ::  android.permission.BROADCAST_STICKY
android.speech.tts.TextToSpeech.isSpeaking()boolean  ::  android.permission.BROADCAST_STICKY
android.speech.tts.TextToSpeech.playSilentUtterance(long,int,java.lang.String)int  ::  android.permission.BROADCAST_STICKY
android.speech.tts.TextToSpeech.setLanguage(java.util.Locale)int  ::  android.permission.BROADCAST_STICKY
android.speech.tts.TextToSpeech.shutdown()void  ::  android.permission.BROADCAST_STICKY
android.speech.tts.TextToSpeech.stop()int  ::  android.permission.BROADCAST_STICKY
android.support.v4.content.ContextCompat.getExternalCacheDirs(android.content.Context)File[]  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.support.v4.content.ContextCompat.getExternalFilesDirs(android.content.Context,java.lang.String)File[]  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.support.v4.content.ContextCompat.getObbDirs(android.content.Context)File[]  ::  android.permission.WRITE_EXTERNAL_STORAGE
android.support.v4.hardware.fingerprint.FingerprintManagerCompat.authenticate(CryptoObject,int,android.support.v4.os.CancellationSignal,AuthenticationCallback,android.os.Handler)void  ::  android.permission.USE_FINGERPRINT
android.support.v4.hardware.fingerprint.FingerprintManagerCompat.hasEnrolledFingerprints()boolean  ::  android.permission.USE_FINGERPRINT
android.support.v4.hardware.fingerprint.FingerprintManagerCompat.isHardwareDetected()boolean  ::  android.permission.USE_FINGERPRINT
android.support.v4.net.ConnectivityManagerCompat.getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)NetworkInfo  ::  android.permission.ACCESS_NETWORK_STATE
android.support.v4.net.ConnectivityManagerCompat.isActiveNetworkMetered(android.net.ConnectivityManager)boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.support.v7.app.TwilightManager.getLastKnownLocationForProvider(java.lang.String)Location  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.telecom.ConnectionService.onCreateUnknownConnection(PhoneAccountHandle,ConnectionRequest)Connection  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.acceptRingingCall()void  ::  android.permission.MODIFY_PHONE_STATE, android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall(int)void  ::  android.permission.MODIFY_PHONE_STATE, android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.addNewIncomingCall(PhoneAccountHandle,android.os.Bundle)void  ::  android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.cancelMissedCallsNotification()void  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()TelecomAnalytics  ::  android.permission.DUMP
android.telecom.TelecomManager.enablePhoneAccount(PhoneAccountHandle,boolean)void  ::  android.permission.MANAGE_OWN_CALLS, android.permission.CALL_PHONE, android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.endCall()boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(PhoneAccountHandle)Uri  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts()List<PhoneAccountHandle>  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts(boolean)List<PhoneAccountHandle>  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getCallState()int  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getCurrentTtyMode()int  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)PhoneAccountHandle  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(PhoneAccountHandle)String  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccount(PhoneAccountHandle)PhoneAccount  ::  android.permission.READ_PHONE_NUMBERS
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)List<PhoneAccountHandle>  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()List<PhoneAccountHandle>  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()PhoneAccountHandle  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(PhoneAccountHandle)String  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,PhoneAccountHandle)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.isVoiceMailNumber(PhoneAccountHandle,java.lang.String)boolean  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void  ::  android.permission.MANAGE_OWN_CALLS, android.permission.CALL_PHONE
android.telecom.TelecomManager.setDefaultDialer(java.lang.String)boolean  ::  android.permission.WRITE_SECURE_SETTINGS, android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.setUserSelectedOutgoingPhoneAccount(PhoneAccountHandle)void  ::  android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void  ::  android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.silenceRinger()void  ::  android.permission.MODIFY_PHONE_STATE, android.permission.ANSWER_PHONE_CALLS
android.telephony.CarrierConfigManager.getConfig()PersistableBundle  ::  android.permission.READ_PHONE_STATE
android.telephony.CarrierConfigManager.getConfigForSubId(int)PersistableBundle  ::  android.permission.READ_PHONE_STATE
android.telephony.CarrierConfigManager.getDefaultCarrierServicePackageName()String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.CarrierConfigManager.notifyConfigChangedForSubId(int)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.CellLocation.requestLocationUpdate()void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.telephony.PhoneNumberUtils.isVoiceMailNumber(java.lang.String)boolean  ::  android.permission.ACCESS_NETWORK_STATE
android.telephony.PhoneStateListener.onCallForwardingIndicatorChanged(boolean)void  ::  android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCallStateChanged(int,java.lang.String)void  ::  android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCellInfoChanged()void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCellLocationChanged(CellLocation)void  ::  android.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.onDataConnectionStateChanged(int)void  ::  android.permission.READ_PHONE_STATE, android.permission.READ_CALL_LOG
android.telephony.PhoneStateListener.onMessageWaitingIndicatorChanged(boolean)void  ::  android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseCallStateChanged(PreciseCallState)void  ::  android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(PreciseDataConnectionState)void  ::  android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onServiceStateChanged(ServiceState)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.telephony.PhoneStateListener.onVoiceActivationStateChanged(int)void  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ServiceState.getOperatorAlpha()String  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.telephony.ServiceState.getOperatorAlphaLong()String  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.telephony.ServiceState.getOperatorAlphaShort()String  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.telephony.ServiceState.getOperatorNumeric()String  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.telephony.SmsManager.copyMessageToIcc([byte,[byte,int)boolean  ::  android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.deleteMessageFromIcc(int)boolean  ::  android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.disableCellBroadcastRange(int,int,int)boolean  ::  android.permission.RECEIVE_EMERGENCY_BROADCAST
android.telephony.SmsManager.downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)void  ::  android.permission.RECEIVE_MMS
android.telephony.SmsManager.enableCellBroadcastRange(int,int,int)boolean  ::  android.permission.RECEIVE_EMERGENCY_BROADCAST
android.telephony.SmsManager.injectSmsPdu([byte,java.lang.String,android.app.PendingIntent)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.SmsManager.sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String)void  ::  android.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.updateMessageOnIcc(int,int,[byte)boolean  ::  android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SubscriptionManager.getActiveSubscriptionIdList()int[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)SubscriptionInfo  ::  android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int  ::  android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)SubscriptionInfo  ::  android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()List<SubscriptionInfo>  ::  android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getResourcesForSubId(android.content.Context,int)Resources  ::  android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.requestEmbeddedSubscriptionInfoListRefresh()void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.setDefaultDataSubId(int)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultSmsSubId(int)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setIconTint(int,int)int  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.answerRingingCall()void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void  ::  android.permission.CALL_PHONE
android.telephony.TelephonyManager.disableDataConnectivity()boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableLocationUpdates()void  ::  android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableDataConnectivity()boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableLocationUpdates()void  ::  android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableLocationUpdates(int)void  ::  android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableVideoCalling(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.endCall()boolean  ::  android.permission.CALL_PHONE
android.telephony.TelephonyManager.getAidForAppType(int)String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()List<CellInfo>  ::  android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getAllowedCarriers(int)List<CarrierIdentifier>  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallState()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallState(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallStateForSlot(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCarrierConfig()PersistableBundle  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)ImsiEncryptionInfo  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)List<String>  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()CellLocation  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCellNetworkScanResults(int)CellNetworkScanResult  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCompleteVoiceMailNumber()String  ::  android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManager.getCompleteVoiceMailNumber(int)String  ::  android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManager.getDataActivationState(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion()String  ::  android.permission.READ_PHONE_STATE, android.permission.SEND_RESPOND_VIA_MESSAGE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns()String[]  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)String[]  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIccAuthentication(int,int,java.lang.String)String  ::  android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getImei()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIsimDomain()String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getIsimImpu()String[]  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getIsimIst()String  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()String  ::  android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getLine1Number(int)String  ::  android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.getLteOnCdmaMode()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNai()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNeighboringCellInfo()List<NeighboringCellInfo>  ::  android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getNetworkType()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getPackagesWithCarrierPrivileges()List<String>  ::  android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPhoneCount()int  ::  android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getPreferredNetworkType(int)int  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()ServiceState  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimState()int  ::  android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.getSubscriberId()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()List<TelephonyHistogram>  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()String  ::  android.permission.READ_PHONE_STATE, android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber()String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)String  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType()int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannel(int)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannel(int,int)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)byte[]  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccExchangeSimIO(int,int,int,int,int,java.lang.String)byte[]  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(int,java.lang.String,int)IccOpenLogicalChannelResponse  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(java.lang.String)IccOpenLogicalChannelResponse  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(java.lang.String,int)IccOpenLogicalChannelResponse  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,int,java.lang.String)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabled()boolean  ::  android.permission.ACCESS_NETWORK_STATE, android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isIdle()boolean  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isRadioOn()boolean  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isRinging()boolean  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean  ::  android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.nvReadItem(int)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvResetConfig(int)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvWriteCdmaPrl([byte)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.nvWriteItem(int,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNetworkScan(NetworkScanRequest,TelephonyScanManager.NetworkScanCallback)NetworkScan  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendEnvelopeWithStatus(int,java.lang.String)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendEnvelopeWithStatus(java.lang.String)String  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,UssdResponseCallback,android.os.Handler)void  ::  android.permission.CALL_PHONE
android.telephony.TelephonyManager.sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.TelephonyManager.setAllowedCarriers(int)int  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierInfoForImsiEncryption(ImsiEncryptionInfo)void  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setLine1NumberForDisplay(java.lang.String,java.lang.String)boolean  ::  android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic(int)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(int,com.android.internal.telephony.OperatorInfo,boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkType(int,int)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)void  ::  android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[]  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[]  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyScanManager.requestNetworkScan(int,NetworkScanRequest,NetworkScanCallback)NetworkScan  ::  android.permission.MODIFY_PHONE_STATE
android.telephony.VisualVoicemailService.sendVisualVoicemailSms(android.content.Context,android.telecom.PhoneAccountHandle,java.lang.String,short,java.lang.String,android.app.PendingIntent)void  ::  android.permission.SEND_SMS
android.telephony.VisualVoicemailService.setSmsFilterSettings(android.content.Context,android.telecom.PhoneAccountHandle,VisualVoicemailSmsFilterSettings)void  ::  android.permission.READ_PHONE_STATE
android.telephony.euicc.EuiccManager.continueOperation(android.content.Intent,android.os.Bundle)void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.deleteSubscription(int,android.app.PendingIntent)void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.downloadSubscription(DownloadableSubscription,boolean,android.app.PendingIntent)void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(android.app.PendingIntent)void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(android.app.PendingIntent)void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(DownloadableSubscription,android.app.PendingIntent)void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.retainSubscriptionsForFactoryReset(android.app.PendingIntent)void  ::  android.permission.MASTER_CLEAR
android.telephony.euicc.EuiccManager.switchToSubscription(int,android.app.PendingIntent)void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)void  ::  android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.view.Display.requestColorMode(int)void  ::  android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.view.InputDevice.disable()void  ::  android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.enable()void  ::  android.permission.DISABLE_INPUT_DEVICE
android.view.WindowManager.getCurrentImeTouchRegion()Region  ::  android.permission.RESTRICTED_VR_ACCESS
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut()void  ::  android.permission.MANAGE_ACCESSIBILITY
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(InputMethodSubtype)boolean  ::  android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setInputMethod(android.os.IBinder,java.lang.String)void  ::  android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.showInputMethodAndSubtypeEnabler(java.lang.String)void  ::  android.permission.READ_EXTERNAL_STORAGE
android.webkit.WebSettings.setGeolocationEnabled(boolean)void  ::  android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION
android.widget.VideoView.setVideoPath(java.lang.String)void  ::  android.permission.WAKE_LOCK
android.widget.VideoView.setVideoURI(android.net.Uri)void  ::  android.permission.WAKE_LOCK
com.android.internal.telephony.IccSmsInterfaceManager.enforcePrivilegedAppPermissions()void  ::  android.permission.MODIFY_PHONE_STATE
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean  ::  android.permission.PACKAGE_USAGE_STATS, android.permission.DUMP
com.android.internal.util.DumpUtils.checkUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean  ::  android.permission.PACKAGE_USAGE_STATS
com.android.internal.widget.LockPatternUtils.requireCredentialEntry(int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.internal.widget.LockPatternUtils.requireStrongAuth(int,int)void  ::  android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
com.android.nfc_extras.NfcAdapterExtras.get(android.nfc.NfcAdapter)NfcAdapterExtras  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.getCardEmulationRoute()CardEmulationRoute  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.getEmbeddedExecutionEnvironment()NfcExecutionEnvironment  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcAdapterExtras.setCardEmulationRoute(CardEmulationRoute)void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.close()void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.open()void  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.nfc_extras.NfcExecutionEnvironment.transceive([byte)byte[]  ::  android.permission.WRITE_SECURE_SETTINGS
com.android.server.ConnectivityService.prepareVpn(java.lang.String,java.lang.String,int)boolean  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.ConnectivityService.setVpnPackageAuthorization(java.lang.String,int,boolean)void  ::  android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.connectivity.Vpn.setAlwaysOnPackage(java.lang.String,boolean)boolean  ::  android.permission.BIND_VPN_SERVICE
com.android.server.pm.PackageManagerService.canViewInstantApps(int,int)boolean  ::  android.permission.ACCESS_INSTANT_APPS
com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(int)void  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(java.lang.String)void  ::  android.permission.CREATE_USERS, android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.checkManageUserAndAcrossUsersFullPermission(java.lang.String)void  ::  android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.pm.UserManagerService.checkManageUsersPermission(java.lang.String)void  ::  android.permission.MANAGE_USERS
com.android.server.pm.UserManagerService.getUserRestrictionSource(java.lang.String,int)int  ::  android.permission.MANAGE_USERS
com.android.server.vr.Vr2dDisplay.setVirtualDisplayProperties(android.app.Vr2dDisplayProperties)void  ::  android.permission.ACCESS_VR_MANAGER
com.android.server.vr.VrManagerInternal.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void  ::  android.permission.ACCESS_VR_MANAGER
com.android.settingslib.suggestions.SuggestionParser.satisifesRequiredUserType(com.android.settingslib.drawer.Tile)boolean  ::  android.permission.MANAGE_USERS
